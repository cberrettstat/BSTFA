n.spatial.bases=8,
n.load.bases=8,
verbose=FALSE,
iters=1000,
burn=20,
thin=2)
bstfa.bi_1level = BSTFA(ymat=utahDataList$TemperatureVals,
dates=utahDataList$Dates,
coords=utahDataList$Coords,
spatial.style='grid',
load.style='grid',
factors.fixed = c(144,89,129,78),
knot.levels=1,
plot.knots=FALSE,
verbose=FALSE,
iters=1000,
burn=20,
thin=2)
bstfa.tps_16 = BSTFA(ymat=utahDataList$TemperatureVals,
dates=utahDataList$Dates,
coords=utahDataList$Coords,
factors.fixed = c(144,89,129,78),
spatial.style='tps',
load.style='tps',
n.spatial.bases=16,
n.load.bases=16,
verbose=FALSE,
iters=1000,
burn=20,
thin=2)
plot.factor(bstfa.f_8,together=TRUE,include.legend=FALSE)
plot.factor(bstfa.bi_1level,together=TRUE,include.legend=FALSE)
plot.factor(bstfa.tps_16,together=TRUE,include.legend=FALSE)
plot.factor(bstfa.f_8,together=TRUE,include.legend=FALSE)
plot.factor(bstfa.bi_1level,together=TRUE,include.legend=FALSE)
plot.factor(bstfa.tps_16,together=TRUE,include.legend=FALSE)
plot.factor(bstfa.f_8,together=TRUE,include.legend=FALSE)
plot.factor(bstfa.tps_16,together=TRUE,include.legend=FALSE)
plot.factor(bstfa.f_8,together=TRUE,include.legend=FALSE)
plot.factor(bstfa.tps_16,together=TRUE,include.legend=FALSE)
predictBSTFA(bstfa.f_8,type='mean')
preds.f_8 = predictBSTFA(bstfa.f_8,type='mean')
preds.bi_1level = predictBSTFA(bstfa.f_8,type='mean')
preds.tps_16 = predictBSTFA(bstfa.f_8,type='mean')
mean(preds.f_8 - preds.bi_1level)
preds.f_8 = predictBSTFA(bstfa.f_8,type='mean')
preds.bi_1level = predictBSTFA(bstfa.bi_1level,type='mean')
preds.tps_16 = predictBSTFA(bstfa.tps_16,type='mean')
mean(preds.f_8 - preds.bi_1level)
mean(preds.f_8 - preds.tps_16)
mean(preds.bi_1level - preds.tps_16)
mean(abs(preds.f_8 - preds.bi_1level))
mean(abs(preds.f_8 - preds.tps_16)))
mean(abs(preds.f_8 - preds.tps_16))
mean(abs(preds.bi_1level - preds.tps_16))
bstfa.tps_16$F.tilde
dim(bstfa.tps_16$Ftilde)
length(bstfa.tps_16$Ftilde)
bstfa.tps_16$Ftilde
length(bstfa.tps_16$F.tilde)
dim(bstfa.tps_16$F.tilde)
f1_tps_16 = apply(bstfa.tps_16$F.tilde,1,mean)
f1_tps_16 = apply(bstfa.tps_16$F.tilde,2,mean)
f_tps_16 = apply(bstfa.tps_16$F.tilde,2,mean)
f_f_8 = apply(bstfa.f_8$F.tilde,2,mean)
f_bi_1level = apply(bstfa.bi_1level$F.tilde,2,mean)
mean(abs(f_f_8 - f_bi_1level))
mean(abs(f_f_8 - f_tps_16))
mean(abs(f_bi_1level - f_tps_16))
devtools::load_all()
plot.map(bstfa.f_8,
parameter='loading',
yearscale=TRUE,
type='mean',
map=TRUE,
state=TRUE,
location='utah',
fine=100,
loading=2)
plot.map(bstfa.bi_1level,
parameter='loading',
yearscale=TRUE,
type='mean',
map=TRUE,
state=TRUE,
location='utah',
fine=100,
loading=2)
plot.map(bstfa.tps_16,
parameter='loading',
yearscale=TRUE,
type='mean',
map=TRUE,
state=TRUE,
location='utah',
fine=100,
loading=2)
plot.map(bstfa.f_8,
parameter='loading',
yearscale=TRUE,
type='mean',
map=TRUE,
state=TRUE,
location='utah',
fine=100,
loading=1)
plot.map(bstfa.bi_1level,
parameter='loading',
yearscale=TRUE,
type='mean',
map=TRUE,
state=TRUE,
location='utah',
fine=100,
loading=1)
plot.map(bstfa.tps_16,
parameter='loading',
yearscale=TRUE,
type='mean',
map=TRUE,
state=TRUE,
location='utah',
fine=100,
loading=1)
plot.factor(bstfa.f_8,factor=2,include.legend=FALSE)
plot.factor(bstfa.bi_1level,factor=2,include.legend=FALSE)
plot.factor(bstfa.tps_16,factor=2,include.legend=FALSE)
mean(abs(preds.f_8 - preds.tps_16))
5004/4
1252+1251
preds.f_8 = predictBSTFA(bstfa.f_8,type='mean')[1252:2503]
f_tps_16 = apply(bstfa.tps_16$F.tilde,2,mean)[1252:2503]
length(f_tps_16)
f_tps_16 = apply(bstfa.tps_16$F.tilde,2,mean)[1252:2502]
f_f_8 = apply(bstfa.f_8$F.tilde,2,mean)[1252:2502]
f_bi_1level = apply(bstfa.bi_1level$F.tilde,2,mean)[1252:2502]
mean(abs(f_f_8 - f_bi_1level))
mean(abs(f_f_8 - f_tps_16))
mean(abs(f_bi_1level - f_tps_16))
plot(f_f_8,x=bstfa.f_8$doy)
plot(f_f_8,x=bstfa.f_8$doy,type='l')
plot(f_f_8,x=bstfa.f_8$dates,type='l')
plot(f_f_8,x=bstfa.f_8$dates,type='l')
lines(f_bi_1level)
lines(f_bi_1level,x=bstfa.f_8$dates)
plot(f_f_8,x=bstfa.f_8$dates,type='l')
lines(f_bi_1level,x=bstfa.f_8$dates)
lines(f_tps_16,x=bstfa.f_8$dates)
plot(f_f_8,x=bstfa.f_8$dates,type='l',col='red',ylim=c(-4,4))
plot(f_f_8,x=bstfa.f_8$dates,type='l',col='red',ylim=c(-4,4))
lines(f_bi_1level,x=bstfa.f_8$dates,col='blue')
lines(f_tps_16,x=bstfa.f_8$dates,col='green')
plot(f_f_8,x=bstfa.f_8$dates,type='l',col='red',
ylim=c(-4,4),
xlab="Dates",
ylab="Factor Value")
plot(f_f_8,x=bstfa.f_8$dates,type='l',col='red',
ylim=c(-4,4),
xlab="Dates",
ylab="Factor Value")
lines(f_bi_1level,x=bstfa.f_8$dates,col='blue')
lines(f_tps_16,x=bstfa.f_8$dates,col='green')
legend('topleft',legend=c('Fourier','Bisquare','TPS'),
col=c('red','blue','green'),
lty=1)
plot(f_f_8,x=bstfa.f_8$dates,type='l',col='red',
ylim=c(-4,4),
xlab="Dates",
ylab="Factor Value",
main="Factor 2")
lines(f_bi_1level,x=bstfa.f_8$dates,col='blue')
lines(f_tps_16,x=bstfa.f_8$dates,col='green')
legend('topleft',legend=c('Fourier','Bisquare','TPS'),
col=c('red','blue','green'),
lty=1)
devtools::load_all()
plot.map(bstfa.f_8,
parameter='loading',
yearscale=TRUE,
type='mean',
map=TRUE,
state=TRUE,
location='utah',
fine=100,
loading=2)
plot.map(bstfa.bi_1level,
parameter='loading',
yearscale=TRUE,
type='mean',
map=TRUE,
state=TRUE,
location='utah',
fine=100,
loading=2)
plot.map(bstfa.tps_16,
parameter='loading',
yearscale=TRUE,
type='mean',
map=TRUE,
state=TRUE,
location='utah',
fine=100,
loading=2)
?BSTFA
devtools::load_all()
utahDataList$Dates
utahDataList$Dates[1251]
i=1
y = utahDataList$TemperatureVals[,i]
y
is.na(y)
mean(is.na(h))
mean(is.na(y))
missing = rep(0,146)
missing = rep(0,146)
for (i in 1:146) {
y = utahDataList$TemperatureVals[,i]
missing[i] = mean(is.na(y))
}
missing
mean(missing)
c(min(missing),max(missing))
utahDataList$Locations
moab = ymat[,89]
can = ymat[,20]
moab = utahDataList$TemperatureVals[,89]
can = utahDataList$TemperatureVals[,20]
plot(moab)
plot(moab,type='l')
plot(y=moab,x=utahDataList$Coords,type='l')
plot(y=moab,x=utahDataList$Dates,type='l')
plot(y=can,x=utahDataList$Dates,type='l')
plot(y=moab,x=utahDataList$Dates,type='l',
ylim=c(-20,20))
plot(y=can,x=utahDataList$Dates,type='l',
ylim=c(-20,20))
par(mfrow=c(2,1))
plot(y=moab,x=utahDataList$Dates,type='l',
ylim=c(-20,20))
plot(y=can,x=utahDataList$Dates,type='l',
ylim=c(-20,20))
par(mfrow=c(1,2))
par(mfrow=c(1,2))
plot(y=moab,x=utahDataList$Dates,type='l',
ylim=c(-20,20))
plot(y=can,x=utahDataList$Dates,type='l',
ylim=c(-20,20))
window=1000:1050
par(mfrow=c(1,2))
plot(y=moab[window],x=utahDataList$Dates[window],type='l',
ylim=c(-20,20))
plot(y=can[window],x=utahDataList$Dates[window],type='l',
ylim=c(-20,20))
window=1000:1100
par(mfrow=c(1,2))
plot(y=moab[window],x=utahDataList$Dates[window],type='l',
ylim=c(-20,20))
plot(y=can[window],x=utahDataList$Dates[window],type='l',
ylim=c(-20,20))
window=950:1000
par(mfrow=c(1,2))
plot(y=moab[window],x=utahDataList$Dates[window],type='l',
ylim=c(-20,20))
plot(y=can[window],x=utahDataList$Dates[window],type='l',
ylim=c(-20,20))
window=900:950
par(mfrow=c(1,2))
plot(y=moab[window],x=utahDataList$Dates[window],type='l',
ylim=c(-20,20))
plot(y=can[window],x=utahDataList$Dates[window],type='l',
ylim=c(-20,20))
window=850:900
par(mfrow=c(1,2))
plot(y=moab[window],x=utahDataList$Dates[window],type='l',
ylim=c(-20,20))
plot(y=can[window],x=utahDataList$Dates[window],type='l',
ylim=c(-20,20))
n.temp.bases = 6
n.times = 1251
freq.temp = 1251
m.fft <- sapply(1:(n.temp.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (1:n.times)/freq.temp)
cos_term <- cos(2 * pi * k * (1:n.times)/freq.temp)
cbind(sin_term, cos_term)
})
QT <- cbind(m.fft[1:n.times,], m.fft[(n.times+1):(2*n.times),])
plot(QT[,1])
QT <- cbind(m.fft[1:n.times,], m.fft[(n.times+1):(2*n.times),])
par(mfrow=c(3,2))
for (i in 1:6) {
plot(QT[,i],
xlab="",
ylab="",
main=paste("r=",i,sep=""))
}
par(mfrow=c(2,3))
for (i in 1:6) {
plot(QT[,i],
xlab="",
ylab="",
main=paste("r=",i,sep=""))
}
n.temp.bases = 6
n.times = 1251
freq.temp = 1251
m.fft <- sapply(1:(n.temp.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (1:n.times)/freq.temp)
cos_term <- cos(2 * pi * k * (1:n.times)/freq.temp)
cbind(sin_term, cos_term)
})
QT <- cbind(m.fft[1:n.times,], m.fft[(n.times+1):(2*n.times),])
par(mfrow=c(2,3))
ints = c(seq(1,n.temp.bases,by=2),seq(2,n.temp.bases,by=2))
for (i in 1:6) {
plot(QT[,i],
xlab="",
ylab="",
main=paste("r=",ints[i],sep=""))
}
n.temp.bases = 6
n.times = 1251
freq.temp = 200
m.fft <- sapply(1:(n.temp.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (1:n.times)/freq.temp)
cos_term <- cos(2 * pi * k * (1:n.times)/freq.temp)
cbind(sin_term, cos_term)
})
QT <- cbind(m.fft[1:n.times,], m.fft[(n.times+1):(2*n.times),])
par(mfrow=c(2,3))
ints = c(seq(1,n.temp.bases,by=2),seq(2,n.temp.bases,by=2))
for (i in 1:6) {
plot(QT[,i],
xlab="",
ylab="",
main=paste("r=",ints[i],sep=""))
}
n.temp.bases = 6
n.times = 1251
freq.temp = 1251
m.fft <- sapply(1:(n.temp.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (1:n.times)/freq.temp)
cos_term <- cos(2 * pi * k * (1:n.times)/freq.temp)
cbind(sin_term, cos_term)
})
QT <- cbind(m.fft[1:n.times,], m.fft[(n.times+1):(2*n.times),])
par(mfrow=c(2,3))
ints = c(seq(1,n.temp.bases,by=2),seq(2,n.temp.bases,by=2))
for (i in 1:6) {
plot(QT[,i],
xlab="",
ylab="",
main=paste("r=",ints[i],sep=""))
}
QT <- cbind(m.fft[1:n.times,], m.fft[(n.times+1):(2*n.times),])
par(mfrow=c(2,3))
ints = c(seq(1,n.temp.bases,by=2),seq(2,n.temp.bases,by=2))
for (i in 1:6) {
m = ifelse(i%%2==0,"", paste("r=",ints[i],sep=""))
plot(QT[,i],
xlab="",
ylab="",
main=m)
}
i=3
i%%2==0
paste("r=",ints[i],sep="")
ints = c(seq(1,n.temp.bases,by=2),seq(2,n.temp.bases,by=2))
for (i in 1:6) {
m = ifelse(i%%2==0,"", paste("r=",i,sep=""))
plot(QT[,i],
xlab="",
ylab="",
main=m)
}
ints
n.temp.bases/2
for (i in 1:n.temp.bases) {
m = ifelse(i<=n.temp.bases/2,"", paste("r=",ints[i],sep=""))
plot(QT[,i],
xlab="",
ylab="",
main=m)
}
for (i in 1:n.temp.bases) {
m = ifelse(i>n.temp.bases/2,"", paste("r=",ints[i],sep=""))
plot(QT[,i],
xlab="",
ylab="",
main=m)
}
devtools::load_all()
plot.fourier.bases(coords=utahDataList$Coords,
R=6)
plot.fourier.bases(coords=utahDataList$Coords,
R=6,plot.3d=TRUE)
devtools::load_all()
plot.fourier.bases(coords=utahDataList$Coords,
R=6,plot.3d=TRUE)
bstfa.output = BSTFA(ymat=utahDataList$TemperatureVals,
dates=utahDataList$Dates,
coords=utahDataList$Coords,
spatial.style='fourier',
load.style='fourier',
factors.fixed = c(144,89,129,78),
knot.levels=1,
plot.knots=FALSE,
verbose=FALSE,
iters=1000,
burn=20,
n.temp.bases = 200,
thin=2)
bstfa.output = BSTFA(ymat=utahDataList$TemperatureVals,
dates=utahDataList$Dates,
coords=utahDataList$Coords,
spatial.style='fourier',
load.style='fourier',
factors.fixed = c(144,89,129,78),
knot.levels=1,
plot.knots=FALSE,
verbose=FALSE,
iters=1000,
burn=20,
n.temp.bases = 200,
thin=2,
verbose=TRUE)
bstfa.output = BSTFA(ymat=utahDataList$TemperatureVals,
dates=utahDataList$Dates,
coords=utahDataList$Coords,
spatial.style='fourier',
load.style='fourier',
factors.fixed = c(144,89,129,78),
knot.levels=1,
plot.knots=FALSE,
verbose=TRUE,
iters=1000,
burn=20,
n.temp.bases = 200,
thin=2)
computation.summary(bstfa.output)
devtools::load_all()
bstfa.output = BSTFA(ymat=utahDataList$TemperatureVals,
dates=utahDataList$Dates,
coords=utahDataList$Coords,
spatial.style='fourier',
load.style='fourier',
n.spatial.bases=8,
factors.fixed = c(144,89,129,78),
verbose=TRUE,
iters=100,
burn=20,
n.temp.bases = 126,
thin=2)
computation.summary(bstfa.output)
bstfa.output = BSTFA(ymat=utahDataList$TemperatureVals,
dates=utahDataList$Dates,
coords=utahDataList$Coords,
spatial.style='fourier',
load.style='fourier',
n.spatial.bases=20,
factors.fixed = c(144,89,129,78),
verbose=TRUE,
iters=100,
burn=20,
n.temp.bases = 126,
thin=2)
computation.summary(bstfa.output)
bstfa.output = BSTFA(ymat=utahDataList$TemperatureVals,
dates=utahDataList$Dates,
coords=utahDataList$Coords,
spatial.style='fourier',
load.style='fourier',
n.load.bases=50,
factors.fixed = c(144,89,129,78),
verbose=TRUE,
iters=100,
burn=20,
n.temp.bases = 126,
thin=2)
computation.summary(bstfa.output)
bstfa.output = BSTFA(ymat=utahDataList$TemperatureVals,
dates=utahDataList$Dates,
coords=utahDataList$Coords,
spatial.style='fourier',
load.style='fourier',
n.load.bases=50,
n.spatial.bases=50,
factors.fixed = c(144,89,129,78),
verbose=TRUE,
iters=100,
burn=20,
n.temp.bases = 126,
thin=2)
bstfa.output = BSTFA(ymat=utahDataList$TemperatureVals,
dates=utahDataList$Dates,
coords=utahDataList$Coords,
spatial.style='fourier',
load.style='fourier',
n.load.bases=50,
n.spatial.bases=20,
factors.fixed = c(144,89,129,78),
verbose=TRUE,
iters=100,
burn=20,
n.temp.bases = 126,
thin=2)
computation.summary(bstfa.output)
1000*4.5
4500/60
5200/60
1000*0.094
/60
?c
