install.packages('sf')
#install.packages('npreg')
#install.packages('scatterplot3d')
install_github("cberrettstat/BSTFA", force=T)
library(BSTFA)
library(lubridate)
library(mvtnorm)
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
setwd('~/Documents/Research/TempChange/STFAModel/')
data2 <- read.csv('PM2.5_California')
set_1 <- data2 |>
select(local_site_name, arithmetic_mean, quarter, year)|>
mutate(Date = case_when(
quarter == 1 ~ as.Date(paste0(year, "-01-01")),
quarter == 2 ~ as.Date(paste0(year, "-04-01")),
quarter == 3 ~ as.Date(paste0(year, "-07-01")),
quarter == 4 ~ as.Date(paste0(year, "-10-01"))))|>
distinct(local_site_name, Date, .keep_all = TRUE)|>
group_by(Date, local_site_name) |>
summarize(Quarterly_mean = mean(arithmetic_mean))|>
pivot_wider(names_from = local_site_name, values_from = Quarterly_mean) |>
arrange(Date)
date_vector <- set_1$Date
set_1$Date <- NULL
set_1 <- as.matrix(set_1)
set_1[which(set_1==0)] <- rnorm(length(which(set_1==0)), .1, .01)
set_1 <- log(set_1)
#Zero-center the data
for(i in 1:dim(set_1)[2]){
set_1[,i] <- set_1[,i] - mean(set_1[,i], na.rm=T)
}
#Remove locations with >80% missing data
percent_missing <- apply(is.na(set_1), 2, mean)
keep <- which(percent_missing < .8)
set_1 <- set_1[,keep]
set_1 <- set_1[,-1] #location 1 has weird behavior at the end of its observed period so I'm just getting rid of it for now
# Set 2: vector of dates with nrows equal to nrows in ymat
# set_2 <- data2|>
# select(quarter, year)|>
# mutate(Date = case_when(
# quarter == 1 ~ as.Date(paste0(year, "-01-01")),
# quarter == 2 ~ as.Date(paste0(year, "-04-01")),
# quarter == 3 ~ as.Date(paste0(year, "-07-01")),
# quarter == 4 ~ as.Date(paste0(year, "-10-01"))))|>
# distinct(Date) |>
# #make the date a vector of dates
# date_vector <- set_2$Date
#Set 3: df of coordinates with nrows equal to ncols in set_1
set_3 <- data2|>
select(local_site_name, longitude, latitude)|>
distinct(local_site_name, .keep_all = TRUE)
set_3 <- set_3[keep,]
set_3 <- set_3[-1,]
out <- BSTFA(ymat = set_1,
dates = date_vector,
coords = set_3[,2:3],
iters=500, n.load.bases=4, n.spatial.bases=4, n.temp.bases=20)
#####################################
# Checking the "full" function
out.full <- BSTFAfull(ymat=set_1, dates=date_vector, coords=set_3[,2:3], iters=1000)
install.packages('coda')
install.packages('ggplot2')
install.packages('ggppubr')
install.packages('ggpubr')
install.packages('npreg')
install.packages('lubridate')
install.packages('matrixcalc')
?compileAttributes
getwd()
setwd('~/Documents/Research/TempChange/STFAModel/BSTFA/')
devtools::build()
install.packages('devtools')
install.packages('devtools')
devtools::build()
devtools::check()
devtools::check()
getwd()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
#####################################
# Checking the "full" function
out.full <- BSTFAfull(ymat=set_1, dates=date_vector, coords=set_3[,2:3], iters=1000)
?kronecker
?diag
?kronecker
#install.packages('npreg')
#install.packages('scatterplot3d')
install_github("cberrettstat/BSTFA", force=T)
library(remotes)
#install.packages('npreg')
#install.packages('scatterplot3d')
install_github("cberrettstat/BSTFA", force=T)
library(BSTFA)
#####################################
# Checking the "full" function
out.full <- BSTFAfull(ymat=set_1, dates=date_vector, coords=set_3[,2:3], iters=1000)
library(remotes)
#install.packages('npreg')
#install.packages('scatterplot3d')
install_github("cberrettstat/BSTFA", force=T)
library(BSTFA)
library(lubridate)
library(mvtnorm)
library(tidyverse)
setwd('~/Documents/Research/TempChange/STFAModel/')
data2 <- read.csv('PM2.5_California')
set_1 <- data2 |>
select(local_site_name, arithmetic_mean, quarter, year)|>
mutate(Date = case_when(
quarter == 1 ~ as.Date(paste0(year, "-01-01")),
quarter == 2 ~ as.Date(paste0(year, "-04-01")),
quarter == 3 ~ as.Date(paste0(year, "-07-01")),
quarter == 4 ~ as.Date(paste0(year, "-10-01"))))|>
distinct(local_site_name, Date, .keep_all = TRUE)|>
group_by(Date, local_site_name) |>
summarize(Quarterly_mean = mean(arithmetic_mean))|>
pivot_wider(names_from = local_site_name, values_from = Quarterly_mean) |>
arrange(Date)
date_vector <- set_1$Date
set_1$Date <- NULL
set_1 <- as.matrix(set_1)
set_1[which(set_1==0)] <- rnorm(length(which(set_1==0)), .1, .01)
set_1 <- log(set_1)
#Zero-center the data
for(i in 1:dim(set_1)[2]){
set_1[,i] <- set_1[,i] - mean(set_1[,i], na.rm=T)
}
#Remove locations with >80% missing data
percent_missing <- apply(is.na(set_1), 2, mean)
keep <- which(percent_missing < .8)
set_1 <- set_1[,keep]
set_1 <- set_1[,-1] #location 1 has weird behavior at the end of its observed period so I'm just getting rid of it for now
# Set 2: vector of dates with nrows equal to nrows in ymat
# set_2 <- data2|>
# select(quarter, year)|>
# mutate(Date = case_when(
# quarter == 1 ~ as.Date(paste0(year, "-01-01")),
# quarter == 2 ~ as.Date(paste0(year, "-04-01")),
# quarter == 3 ~ as.Date(paste0(year, "-07-01")),
# quarter == 4 ~ as.Date(paste0(year, "-10-01"))))|>
# distinct(Date) |>
# #make the date a vector of dates
# date_vector <- set_2$Date
#Set 3: df of coordinates with nrows equal to ncols in set_1
set_3 <- data2|>
select(local_site_name, longitude, latitude)|>
distinct(local_site_name, .keep_all = TRUE)
set_3 <- set_3[keep,]
set_3 <- set_3[-1,]
#####################################
# Checking the "full" function
out.full <- BSTFAfull(ymat=set_1, dates=date_vector, coords=set_3[,2:3], iters=1000)
getwd()
devtools::build()
devtools::check()
library(remotes)
#install.packages('npreg')
#install.packages('scatterplot3d')
install_github("cberrettstat/BSTFA", force=T)
library(BSTFA)
library(lubridate)
library(mvtnorm)
library(tidyverse)
setwd('~/Documents/Research/TempChange/STFAModel/')
data2 <- read.csv('PM2.5_California')
set_1 <- data2 |>
select(local_site_name, arithmetic_mean, quarter, year)|>
mutate(Date = case_when(
quarter == 1 ~ as.Date(paste0(year, "-01-01")),
quarter == 2 ~ as.Date(paste0(year, "-04-01")),
quarter == 3 ~ as.Date(paste0(year, "-07-01")),
quarter == 4 ~ as.Date(paste0(year, "-10-01"))))|>
distinct(local_site_name, Date, .keep_all = TRUE)|>
group_by(Date, local_site_name) |>
summarize(Quarterly_mean = mean(arithmetic_mean))|>
pivot_wider(names_from = local_site_name, values_from = Quarterly_mean) |>
arrange(Date)
date_vector <- set_1$Date
set_1$Date <- NULL
set_1 <- as.matrix(set_1)
set_1[which(set_1==0)] <- rnorm(length(which(set_1==0)), .1, .01)
set_1 <- log(set_1)
#Zero-center the data
for(i in 1:dim(set_1)[2]){
set_1[,i] <- set_1[,i] - mean(set_1[,i], na.rm=T)
}
#Remove locations with >80% missing data
percent_missing <- apply(is.na(set_1), 2, mean)
keep <- which(percent_missing < .8)
set_1 <- set_1[,keep]
set_1 <- set_1[,-1] #location 1 has weird behavior at the end of its observed period so I'm just getting rid of it for now
# Set 2: vector of dates with nrows equal to nrows in ymat
# set_2 <- data2|>
# select(quarter, year)|>
# mutate(Date = case_when(
# quarter == 1 ~ as.Date(paste0(year, "-01-01")),
# quarter == 2 ~ as.Date(paste0(year, "-04-01")),
# quarter == 3 ~ as.Date(paste0(year, "-07-01")),
# quarter == 4 ~ as.Date(paste0(year, "-10-01"))))|>
# distinct(Date) |>
# #make the date a vector of dates
# date_vector <- set_2$Date
#Set 3: df of coordinates with nrows equal to ncols in set_1
set_3 <- data2|>
select(local_site_name, longitude, latitude)|>
distinct(local_site_name, .keep_all = TRUE)
set_3 <- set_3[keep,]
set_3 <- set_3[-1,]
#####################################
# Checking the "full" function
out.full <- BSTFAfull(ymat=set_1, dates=date_vector, coords=set_3[,2:3], iters=1000)
library(remotes)
#install.packages('npreg')
#install.packages('scatterplot3d')
install_github("cberrettstat/BSTFA", force=T)
library(BSTFA)
library(lubridate)
library(mvtnorm)
library(tidyverse)
setwd('~/Documents/Research/TempChange/STFAModel/')
data2 <- read.csv('PM2.5_California')
set_1 <- data2 |>
select(local_site_name, arithmetic_mean, quarter, year)|>
mutate(Date = case_when(
quarter == 1 ~ as.Date(paste0(year, "-01-01")),
quarter == 2 ~ as.Date(paste0(year, "-04-01")),
quarter == 3 ~ as.Date(paste0(year, "-07-01")),
quarter == 4 ~ as.Date(paste0(year, "-10-01"))))|>
distinct(local_site_name, Date, .keep_all = TRUE)|>
group_by(Date, local_site_name) |>
summarize(Quarterly_mean = mean(arithmetic_mean))|>
pivot_wider(names_from = local_site_name, values_from = Quarterly_mean) |>
arrange(Date)
date_vector <- set_1$Date
set_1$Date <- NULL
set_1 <- as.matrix(set_1)
set_1[which(set_1==0)] <- rnorm(length(which(set_1==0)), .1, .01)
set_1 <- log(set_1)
#Zero-center the data
for(i in 1:dim(set_1)[2]){
set_1[,i] <- set_1[,i] - mean(set_1[,i], na.rm=T)
}
#Remove locations with >80% missing data
percent_missing <- apply(is.na(set_1), 2, mean)
keep <- which(percent_missing < .8)
set_1 <- set_1[,keep]
set_1 <- set_1[,-1] #location 1 has weird behavior at the end of its observed period so I'm just getting rid of it for now
# Set 2: vector of dates with nrows equal to nrows in ymat
# set_2 <- data2|>
# select(quarter, year)|>
# mutate(Date = case_when(
# quarter == 1 ~ as.Date(paste0(year, "-01-01")),
# quarter == 2 ~ as.Date(paste0(year, "-04-01")),
# quarter == 3 ~ as.Date(paste0(year, "-07-01")),
# quarter == 4 ~ as.Date(paste0(year, "-10-01"))))|>
# distinct(Date) |>
# #make the date a vector of dates
# date_vector <- set_2$Date
#Set 3: df of coordinates with nrows equal to ncols in set_1
set_3 <- data2|>
select(local_site_name, longitude, latitude)|>
distinct(local_site_name, .keep_all = TRUE)
set_3 <- set_3[keep,]
set_3 <- set_3[-1,]
#####################################
# Checking the "full" function
out.full <- BSTFAfull(ymat=set_1, dates=date_vector, coords=set_3[,2:3], iters=1000)
?is.atomic
var(c(5,4,3))
var(c(5,4,1))
library(remotes)
#install.packages('npreg')
#install.packages('scatterplot3d')
install_github("cberrettstat/BSTFA", force=T)
library(BSTFA)
library(lubridate)
library(mvtnorm)
library(tidyverse)
setwd('~/Documents/Research/TempChange/STFAModel/')
data2 <- read.csv('PM2.5_California')
set_1 <- data2 |>
select(local_site_name, arithmetic_mean, quarter, year)|>
mutate(Date = case_when(
quarter == 1 ~ as.Date(paste0(year, "-01-01")),
quarter == 2 ~ as.Date(paste0(year, "-04-01")),
quarter == 3 ~ as.Date(paste0(year, "-07-01")),
quarter == 4 ~ as.Date(paste0(year, "-10-01"))))|>
distinct(local_site_name, Date, .keep_all = TRUE)|>
group_by(Date, local_site_name) |>
summarize(Quarterly_mean = mean(arithmetic_mean))|>
pivot_wider(names_from = local_site_name, values_from = Quarterly_mean) |>
arrange(Date)
date_vector <- set_1$Date
set_1$Date <- NULL
set_1 <- as.matrix(set_1)
set_1[which(set_1==0)] <- rnorm(length(which(set_1==0)), .1, .01)
set_1 <- log(set_1)
#Zero-center the data
for(i in 1:dim(set_1)[2]){
set_1[,i] <- set_1[,i] - mean(set_1[,i], na.rm=T)
}
#Remove locations with >80% missing data
percent_missing <- apply(is.na(set_1), 2, mean)
keep <- which(percent_missing < .8)
set_1 <- set_1[,keep]
set_1 <- set_1[,-1] #location 1 has weird behavior at the end of its observed period so I'm just getting rid of it for now
# Set 2: vector of dates with nrows equal to nrows in ymat
# set_2 <- data2|>
# select(quarter, year)|>
# mutate(Date = case_when(
# quarter == 1 ~ as.Date(paste0(year, "-01-01")),
# quarter == 2 ~ as.Date(paste0(year, "-04-01")),
# quarter == 3 ~ as.Date(paste0(year, "-07-01")),
# quarter == 4 ~ as.Date(paste0(year, "-10-01"))))|>
# distinct(Date) |>
# #make the date a vector of dates
# date_vector <- set_2$Date
#Set 3: df of coordinates with nrows equal to ncols in set_1
set_3 <- data2|>
select(local_site_name, longitude, latitude)|>
distinct(local_site_name, .keep_all = TRUE)
set_3 <- set_3[keep,]
set_3 <- set_3[-1,]
out <- BSTFA(ymat = set_1,
dates = date_vector,
coords = set_3[,2:3],
iters=500, n.load.bases=4, n.spatial.bases=4, n.temp.bases=20)
#####################################
# Checking the "full" function
out.full <- BSTFAfull(ymat=set_1, dates=date_vector, coords=set_3[,2:3], iters=1000)
var(c(1,2,3)-c(3,2,1))
var(c(1,2,3)-c(3,2,1)-rep(0,3))
library(remotes)
#install.packages('npreg')
#install.packages('scatterplot3d')
install_github("cberrettstat/BSTFA", force=T)
library(BSTFA)
library(lubridate)
library(mvtnorm)
library(tidyverse)
setwd('~/Documents/Research/TempChange/STFAModel/')
data2 <- read.csv('PM2.5_California')
set_1 <- data2 |>
select(local_site_name, arithmetic_mean, quarter, year)|>
mutate(Date = case_when(
quarter == 1 ~ as.Date(paste0(year, "-01-01")),
quarter == 2 ~ as.Date(paste0(year, "-04-01")),
quarter == 3 ~ as.Date(paste0(year, "-07-01")),
quarter == 4 ~ as.Date(paste0(year, "-10-01"))))|>
distinct(local_site_name, Date, .keep_all = TRUE)|>
group_by(Date, local_site_name) |>
summarize(Quarterly_mean = mean(arithmetic_mean))|>
pivot_wider(names_from = local_site_name, values_from = Quarterly_mean) |>
arrange(Date)
date_vector <- set_1$Date
set_1$Date <- NULL
set_1 <- as.matrix(set_1)
set_1[which(set_1==0)] <- rnorm(length(which(set_1==0)), .1, .01)
set_1 <- log(set_1)
#Zero-center the data
for(i in 1:dim(set_1)[2]){
set_1[,i] <- set_1[,i] - mean(set_1[,i], na.rm=T)
}
#Remove locations with >80% missing data
percent_missing <- apply(is.na(set_1), 2, mean)
keep <- which(percent_missing < .8)
set_1 <- set_1[,keep]
set_1 <- set_1[,-1] #location 1 has weird behavior at the end of its observed period so I'm just getting rid of it for now
# Set 2: vector of dates with nrows equal to nrows in ymat
# set_2 <- data2|>
# select(quarter, year)|>
# mutate(Date = case_when(
# quarter == 1 ~ as.Date(paste0(year, "-01-01")),
# quarter == 2 ~ as.Date(paste0(year, "-04-01")),
# quarter == 3 ~ as.Date(paste0(year, "-07-01")),
# quarter == 4 ~ as.Date(paste0(year, "-10-01"))))|>
# distinct(Date) |>
# #make the date a vector of dates
# date_vector <- set_2$Date
#Set 3: df of coordinates with nrows equal to ncols in set_1
set_3 <- data2|>
select(local_site_name, longitude, latitude)|>
distinct(local_site_name, .keep_all = TRUE)
set_3 <- set_3[keep,]
set_3 <- set_3[-1,]
#####################################
# Checking the "full" function
out.full <- BSTFAfull(ymat=set_1, dates=date_vector, coords=set_3[,2:3], iters=1000)
ymat <- set_1
y <- c(ymat)
class(y)
class(set_1)
length(y)
dim(set_1)
mis1 <-  ifelse(is.na(y), TRUE, FALSE)
mis2 <- is.na(y)
sum(mis1)
sum(mis2)
sum(mis1-mis2)
which(mis2)
length(which(mis2))
temp <- y[missing]
temp <- y[mis1]
length(temp)
head(temp)
y[1]
library(remotes)
#install.packages('npreg')
#install.packages('scatterplot3d')
install_github("cberrettstat/BSTFA", force=T)
library(BSTFA)
library(lubridate)
library(mvtnorm)
library(tidyverse)
setwd('~/Documents/Research/TempChange/STFAModel/')
data2 <- read.csv('PM2.5_California')
set_1 <- data2 |>
select(local_site_name, arithmetic_mean, quarter, year)|>
mutate(Date = case_when(
quarter == 1 ~ as.Date(paste0(year, "-01-01")),
quarter == 2 ~ as.Date(paste0(year, "-04-01")),
quarter == 3 ~ as.Date(paste0(year, "-07-01")),
quarter == 4 ~ as.Date(paste0(year, "-10-01"))))|>
distinct(local_site_name, Date, .keep_all = TRUE)|>
group_by(Date, local_site_name) |>
summarize(Quarterly_mean = mean(arithmetic_mean))|>
pivot_wider(names_from = local_site_name, values_from = Quarterly_mean) |>
arrange(Date)
date_vector <- set_1$Date
set_1$Date <- NULL
set_1 <- as.matrix(set_1)
set_1[which(set_1==0)] <- rnorm(length(which(set_1==0)), .1, .01)
set_1 <- log(set_1)
#Zero-center the data
for(i in 1:dim(set_1)[2]){
set_1[,i] <- set_1[,i] - mean(set_1[,i], na.rm=T)
}
#Remove locations with >80% missing data
percent_missing <- apply(is.na(set_1), 2, mean)
keep <- which(percent_missing < .8)
set_1 <- set_1[,keep]
set_1 <- set_1[,-1] #location 1 has weird behavior at the end of its observed period so I'm just getting rid of it for now
# Set 2: vector of dates with nrows equal to nrows in ymat
# set_2 <- data2|>
# select(quarter, year)|>
# mutate(Date = case_when(
# quarter == 1 ~ as.Date(paste0(year, "-01-01")),
# quarter == 2 ~ as.Date(paste0(year, "-04-01")),
# quarter == 3 ~ as.Date(paste0(year, "-07-01")),
# quarter == 4 ~ as.Date(paste0(year, "-10-01"))))|>
# distinct(Date) |>
# #make the date a vector of dates
# date_vector <- set_2$Date
#Set 3: df of coordinates with nrows equal to ncols in set_1
set_3 <- data2|>
select(local_site_name, longitude, latitude)|>
distinct(local_site_name, .keep_all = TRUE)
set_3 <- set_3[keep,]
set_3 <- set_3[-1,]
out <- BSTFA(ymat = set_1,
dates = date_vector,
coords = set_3[,2:3],
iters=500, n.load.bases=4, n.spatial.bases=4, n.temp.bases=20)
#
#####################################
# Checking the "full" function
out.full <- BSTFAfull(ymat=set_1, dates=date_vector, coords=set_3[,2:3], iters=1000)
class(set_1)
y <- c(ymat)
y <- c(set_1)
class(y)
y - 2
var(y-2)
which(is.na(y))
whichmis <- which(is.na(y))
y[whichmis] <- 0
var(y)
var(y-2)
n.times
dim(set_1)
n.times <- 100
Tsub <- -(n.times/2-0.5):(n.times/2-0.5)
n.locs <- 139
Tfull <- Matrix::kronecker(Matrix::Diagonal(n=n.locs), Tsub)
ItTT <- as(base::kronecker(diag(1,n.locs), t(Tsub)%*%Tsub), "sparseMatrix")
ItT <- as(base::kronecker(diag(1,n.locs), t(Tsub)), "sparseMatrix")
beta.var <- solve(ItTT)
beta.var
beta.mean <- beta.var%*%ItT%*%y #starting values for beta
beta.mean
beta <- as.matrix(beta)
beta <- as.matrix(beta.mean)
beta
beta <- beta + rnorm(length(beta.mean), 0, sd(beta.mean))
beta
Tfullbeta.long <- c(Tfull%*%beta)
class(Tfullbeta.long)
class(Tfull%*%beta)
var(y-Tfull%*%beta)
Tfullbeta.long <- Tfull%*%beta
class(y)
class(Tfullbeta.long)
Tfullbeta.long <- as.numeric(Tfullbeta.long)
var(y-Tfullbeta.long)
var(y)
Tfullbeta.long
