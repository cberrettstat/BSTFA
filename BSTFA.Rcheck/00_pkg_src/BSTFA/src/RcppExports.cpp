// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_mvrnorm
arma::vec cpp_mvrnorm(arma::vec mu, arma::mat sigma);
RcppExport SEXP _BSTFA_cpp_mvrnorm(SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mvrnorm(mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// sampleFactors
arma::mat sampleFactors(arma::mat Lambda, arma::mat Pmatprime, arma::vec FLambdalong, arma::mat Fmat, arma::vec y, arma::vec mulong, arma::vec Tfullbetalong, arma::vec Bfullxilong, arma::mat Omega, arma::mat SigmaFinv, double sigma2, int ntimes);
RcppExport SEXP _BSTFA_sampleFactors(SEXP LambdaSEXP, SEXP PmatprimeSEXP, SEXP FLambdalongSEXP, SEXP FmatSEXP, SEXP ySEXP, SEXP mulongSEXP, SEXP TfullbetalongSEXP, SEXP BfullxilongSEXP, SEXP OmegaSEXP, SEXP SigmaFinvSEXP, SEXP sigma2SEXP, SEXP ntimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Pmatprime(PmatprimeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type FLambdalong(FLambdalongSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Fmat(FmatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mulong(mulongSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Tfullbetalong(TfullbetalongSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Bfullxilong(BfullxilongSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type SigmaFinv(SigmaFinvSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type ntimes(ntimesSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleFactors(Lambda, Pmatprime, FLambdalong, Fmat, y, mulong, Tfullbetalong, Bfullxilong, Omega, SigmaFinv, sigma2, ntimes));
    return rcpp_result_gen;
END_RCPP
}
// sampleFactorsNoConf
arma::mat sampleFactorsNoConf(arma::mat Lambda, arma::vec tempvals, arma::mat Fmat, arma::mat Fvar, arma::mat Omega, arma::mat SigmaFinv, double sigma2, int ntimes, int nlocs);
RcppExport SEXP _BSTFA_sampleFactorsNoConf(SEXP LambdaSEXP, SEXP tempvalsSEXP, SEXP FmatSEXP, SEXP FvarSEXP, SEXP OmegaSEXP, SEXP SigmaFinvSEXP, SEXP sigma2SEXP, SEXP ntimesSEXP, SEXP nlocsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tempvals(tempvalsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Fmat(FmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Fvar(FvarSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type SigmaFinv(SigmaFinvSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< int >::type nlocs(nlocsSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleFactorsNoConf(Lambda, tempvals, Fmat, Fvar, Omega, SigmaFinv, sigma2, ntimes, nlocs));
    return rcpp_result_gen;
END_RCPP
}
// submatTest
arma::mat submatTest(arma::mat X, arma::uvec ind);
RcppExport SEXP _BSTFA_submatTest(SEXP XSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(submatTest(X, ind));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BSTFA_cpp_mvrnorm", (DL_FUNC) &_BSTFA_cpp_mvrnorm, 2},
    {"_BSTFA_sampleFactors", (DL_FUNC) &_BSTFA_sampleFactors, 12},
    {"_BSTFA_sampleFactorsNoConf", (DL_FUNC) &_BSTFA_sampleFactorsNoConf, 9},
    {"_BSTFA_submatTest", (DL_FUNC) &_BSTFA_submatTest, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BSTFA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
